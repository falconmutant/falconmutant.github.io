{"version":3,"file":"static/webpack/static/development/pages/promovido.js.21b5f2983ac03c0784f7.hot-update.js","sources":["webpack:///./actions/promovido.js"],"sourcesContent":["import React from 'react'\nimport { actionTypes } from './types'\nimport fetch from 'isomorphic-unfetch'\n\nexport const get_zones = token => async dispatch => {\n    const response = await fetch('http://10.0.0.5:8000/api/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify({\n            app: 'territory',\n            target: 'zone',\n            action: 'all',\n            depth: 2\n        })\n    });\n    if (response.ok){\n        return dispatch({\n            type: actionTypes.PROMOTED_GET_ZONES,\n            payload: await response.json()\n        });\n    }\n};\n\nexport const get_areas = (Data, zone) => dispatch => {\n    Data.map(data => {\n        if(zone == data.id) return dispatch({\n            type: actionTypes.PROMOTED_GET_AREAS,\n            payload: data.area\n        });\n    });\n};\n\nexport const get_sections = (Data, form) => dispatch => {\n    Data.map(data => {\n        if(form.zone == data.id) data.area.map(area => {\n            if(form.area == area.id) return dispatch({\n                type: actionTypes.PROMOTED_GET_SECTIONS,\n                payload: area.section\n            })\n        })\n    })\n};\n\nexport const get_persons = (Data, token, form, name) => async dispatch => {\n    let name_section;\n    Data.map(data => {\n        if(form.zone == data.id) data.area.map(area => {\n            if(form.area == area.id) area.section.map(section => {\n                if(form.section == section.id) name_section = section.section;\n            })\n        })\n    });\n    const response = await fetch('http://10.0.0.5:8000/api/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify({\n            app: 'api',\n            target: 'census',\n            action: 'get',\n            model: {\n                search: {\n                    \"search\": name,\n                    \"address__Seccion\": `${name_section}`\n                }\n            }\n        })\n    });\n    if (response.ok){\n        return dispatch({\n            type: actionTypes.PROMOTED_GET_PERSONS,\n            payload: await response.json()\n        });\n    }\n};\n\nexport const set_formPromoted = (target, value) => dispatch =>{\n    return dispatch({\n        type: actionTypes.PROMOTED_SET_FORM,\n        target,\n        value\n    })\n};\n\nexport const save_promoted = state => async dispatch => {\n    let body;\n    let formPromoted = state.promovido.formPromoted;\n    if(formPromoted.userExist != null){\n        body = JSON.stringify({\n            app: 'api',\n            target: 'promoted',\n            action: 'add',\n            model:{\n                person: formPromoted.userExist,\n                phone: formPromoted.phone,\n                status: 'S',\n                candidate: [state.global.active_candidate]\n            }\n        })\n    } else {\n        const response = await fetch('http://10.0.0.5:8000/api/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${state.auth.token}`\n            },\n            body: JSON.stringify({\n                app: 'api',\n                target: 'census',\n                action: 'add',\n                model:{\n                    last_name: formPromoted.last_name,\n                    second_last_name: formPromoted.second_last_name,\n                    name: formPromoted.name,\n                    address:{\n                        ...state.promovido.forms,\n                        birthday: `${formPromoted.day}/${formPromoted.month}/${formPromoted.year}`\n                    }\n                }\n            })\n        });\n        if (response.ok){\n            body = JSON.stringify({\n                app: 'api',\n                target: 'promoted',\n                action: 'add',\n                model:{\n                    person: await response.json().id,\n                    phone: formPromoted.phone,\n                    status: 'S',\n                    candidate: [state.global.active_candidate]\n                }\n            })\n        } else {\n            return {\n                error: 'error'\n            }\n        }\n\n    }\n    const response = await fetch('http://10.0.0.5:8000/api/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${state.auth.token}`\n        },\n        body\n    });\n    if (response.ok){\n        return dispatch({type: actionTypes.SAVE_PROMOTED});\n    }\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AANA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAgBA;AACA;AAjBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAJA;AANA;AACA;AAVA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA6BA;AACA;AA9BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAJA;AAJA;AANA;AACA;AAjBA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AA2CA;AACA;AACA;AACA;AA9CA;AAAA;AAuCA;AACA;AACA;AACA;AA1CA;AAsCA;AAtCA;AAAA;AACA;AADA;AAAA;AAmDA;AADA;AACA;AAnDA;AAAA;AAAA;AAyDA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;AAzDA;AAwDA;AACA;AAzDA;AAAA;AAAA;AAAA;AACA;AADA;AAiEA;AAAA;AACA;AAlEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}