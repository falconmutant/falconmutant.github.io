{"version":3,"file":"static/webpack/static/development/pages/_app.js.cabd96026c82c03dc801.hot-update.js","sources":["webpack:///./reducers/promovido.js"],"sourcesContent":["import { actionTypes } from '../actions/types'\n\nconst initialState = {\n    Data: [],\n    Zones: [],\n    Areas: [],\n    Sections: [],\n    Persons: [],\n    forms: {\n        zone: '',\n        area: '',\n        section: ''\n    },\n    formPromoted: {}\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case actionTypes.PROMOTED_GET_ZONES:\n            let Zones = [];\n            action.payload.map(zone => {\n                Zones.push({text: zone.name, id: zone.id})\n            });\n            return{\n                ...state,\n                Data: action.payload,\n                Zones\n            };\n        case actionTypes.PROMOTED_GET_AREAS:\n            let Areas = [];\n            action.payload.map(area => {\n                Areas.push({text: area.name, id: area.id})\n            });\n            return{\n                ...state,\n                Areas\n            };\n        case actionTypes.PROMOTED_GET_SECTIONS:\n            let Sections = [];\n            action.payload.map(section => {\n                Sections.push({text: section.section, id: section.id})\n            });\n            return{\n                ...state,\n                Sections\n            };\n        case actionTypes.PROMOTED_GET_PERSONS:\n            console.log(action.payload);\n            console.log(typeof action.payload);\n            let Persons = [];\n            if(!Array.isArray(action.payload)){\n                const person = action.payload;\n                let date = person.cve.substr(6, 6);\n                date = date.substr(0,2)+'/'+date.substr(2, 2)+'/'+date.substr(4,2);\n                Persons.push({\n                    id: person.id,\n                    full: `${person.last_name} ${person.second_last_name} ${person.name}`,\n                    name: person.name,\n                    last_name: person.last_name,\n                    second_last_name: person.second_last_name,\n                    date: date\n                })\n            } else if (action.payload.length > 0) action.payload.forEach(function(person){\n                let date = person.cve.substr(6, 6);\n                date = date.substr(0,2)+'/'+date.substr(2, 2)+'/'+date.substr(4,2);\n                Persons.push({\n                    id: person.id,\n                    full: `${person.last_name} ${person.second_last_name} ${person.name}`,\n                    name: person.name,\n                    last_name: person.last_name,\n                    second_last_name: person.second_last_name,\n                    date: date\n                })\n            });\n            return{\n                ...state,\n                Persons\n            };\n        case actionTypes.PROMOTED_SET_FORM:\n            let formPromoted = state.formPromoted;\n            if (action.target == 'name') formPromoted['name'] = action.value;\n            if (action.target == 'last_name') formPromoted['last_name'] = action.value;\n            if (action.target == 'second_last_name') formPromoted['second_last_name'] = action.value;\n            if (action.target == 'day') formPromoted['day'] = action.value;\n            if (action.target == 'month') formPromoted['month'] = action.value;\n            if (action.target == 'year') formPromoted['year'] = action.value;\n            if (action.target == 'phone') formPromoted['phone'] = action.value;\n            if (action.target == 'userExist') formPromoted['userExist'] = action.value;\n            return{\n                ...state,\n                formPromoted\n            };\n        case actionTypes.SAVE_PROMOTED:\n            return{\n                ...state,\n                Persons: [],\n                formPromoted: {}\n            };\n        case actionTypes.DELETE_PROMOTED:\n            return{\n                Data: [],\n                Zones: [],\n                Areas: [],\n                Sections: [],\n                Persons: [],\n                forms: {\n                    zone: '',\n                    area: '',\n                    section: ''\n                },\n                formPromoted: {}\n            };\n        default:\n            return state;\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AAcA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAXA;AACA;AAYA;AACA;AAhGA;AAkGA;;;;A","sourceRoot":""}