{"version":3,"file":"static/webpack/static/development/pages/promovido.js.883aeb3c6f9c957976a5.hot-update.js","sources":["webpack:///./actions/promovido.js","webpack:///./actions/types.js","webpack:///./pages/promovido.js"],"sourcesContent":["import React from 'react'\nimport { actionTypes } from './types'\nimport fetch from 'isomorphic-unfetch'\n\nexport const get_zones = token => async dispatch => {\n    let response = await fetch('http://10.0.0.5:8000/api/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify({\n            app: 'territory',\n            target: 'zone',\n            action: 'all',\n            depth: 2\n        })\n    });\n    if (response.ok){\n        return dispatch({\n            type: actionTypes.PROMOTED_GET_ZONES,\n            payload: await response.json()\n        });\n    }\n    response = await fetch('http://10.0.0.5:8000/api/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify({\n            app: 'api',\n            target: 'promoted',\n            action: 'all',\n            depth: 2\n        })\n    });\n    if (response.ok){\n        return dispatch({\n            type: actionTypes.GET_PROMOTED,\n            payload: await response.json()\n        });\n    }\n};\n\nexport const get_areas = (Data, zone) => dispatch => {\n    Data.map(data => {\n        if(zone == data.id) return dispatch({\n            type: actionTypes.PROMOTED_GET_AREAS,\n            payload: data.area\n        });\n    });\n};\n\nexport const get_sections = (Data, form) => dispatch => {\n    Data.map(data => {\n        if(form.zone == data.id) data.area.map(area => {\n            if(form.area == area.id) return dispatch({\n                type: actionTypes.PROMOTED_GET_SECTIONS,\n                payload: area.section\n            })\n        })\n    })\n};\n\nexport const get_persons = (Data, token, form, name) => async dispatch => {\n    let name_section;\n    Data.map(data => {\n        if(form.zone == data.id) data.area.map(area => {\n            if(form.area == area.id) area.section.map(section => {\n                if(form.section == section.id) name_section = section.section;\n            })\n        })\n    });\n    const response = await fetch('http://10.0.0.5:8000/api/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${token}`\n        },\n        body: JSON.stringify({\n            app: 'api',\n            target: 'census',\n            action: 'get',\n            model: {\n                search: {\n                    \"search\": name,\n                    \"address__Seccion\": `${name_section}`\n                }\n            }\n        })\n    });\n    if (response.ok){\n        return dispatch({\n            type: actionTypes.PROMOTED_GET_PERSONS,\n            payload: await response.json()\n        });\n    }\n};\n\nexport const set_formPromoted = (target, value) => dispatch =>{\n    return dispatch({\n        type: actionTypes.PROMOTED_SET_FORM,\n        target,\n        value\n    })\n};\n\nexport const save_promoted = state => async dispatch => {\n    let body;\n    let formPromoted = state.promovido.formPromoted;\n    if(formPromoted.userExist != null){\n        body = JSON.stringify({\n            app: 'api',\n            target: 'promoted',\n            action: 'add',\n            model:{\n                person: formPromoted.userExist,\n                phone: formPromoted.phone,\n                status: 'S',\n                candidate: [state.global.active_candidate]\n            }\n        })\n    } else {\n        const response = await fetch('http://10.0.0.5:8000/api/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${state.auth.token}`\n            },\n            body: JSON.stringify({\n                app: 'api',\n                target: 'census',\n                action: 'add',\n                model:{\n                    last_name: formPromoted.last_name,\n                    second_last_name: formPromoted.second_last_name,\n                    name: formPromoted.name,\n                    address:{\n                        ...state.promovido.forms,\n                        birthday: `${formPromoted.day}/${formPromoted.month}/${formPromoted.year}`\n                    }\n                }\n            })\n        });\n        if (response.ok){\n            let person = await response.json();\n            body = JSON.stringify({\n                app: 'api',\n                target: 'promoted',\n                action: 'add',\n                model:{\n                    person: person.id,\n                    phone: formPromoted.phone,\n                    status: 'S',\n                    candidate: [state.global.active_candidate]\n                }\n            })\n        } else {\n            return {\n                error: 'error'\n            }\n        }\n\n    }\n    const response = await fetch('http://10.0.0.5:8000/api/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Token ${state.auth.token}`\n        },\n        body\n    });\n    if (response.ok){\n        return dispatch({type: actionTypes.SAVE_PROMOTED});\n    }\n};","export const actionTypes = {\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n    LOGIN_FAIL: 'LOGIN_FAIL',\n    LOGOUT_SUCCESS: 'LOGOUT_SUCCESS',\n    AUTH_ERROR: 'AUTH_ERROR',\n    LOAD_MENU: 'LOAD_MENU',\n    GET_SECTIONS: 'GET_SECTIONS',\n    GET_POLLING_STATIONS: 'GET_POLLING_STATIONS',\n    GET_NOMINAL_LIST: 'GET_NOMINAL_LIST',\n    DELETE_NOMINAL_LIST: 'DELETE_NOMINAL_LIST',\n    DELETE_PROMOTED: 'DELETE_PROMOTED',\n    GLOBAL_SET_PROCESS: 'GLOBAL_SET_PROCESS',\n    GLOBAL_SET_CANDIDATE: 'GLOBAL_SET_CANDIDATE',\n    GLOBAL_GET_PROCESS: 'GLOBAL_GET_PROCESS',\n    GLOBAL_GET_CANDIDATES: 'GLOBAL_GET_CANDIDATES',\n    GLOBAL_GET_NEW_PROCESS: 'GLOBAL_GET_NEW_PROCESS',\n    PROMOTED_GET_SECTIONS: 'PROMOTED_GET_SECTIONS',\n    PROMOTED_GET_ZONES: 'PROMOTED_GET_ZONES',\n    PROMOTED_GET_AREAS: 'PROMOTED_GET_AREAS',\n    PROMOTED_GET_PERSONS: 'PROMOTED_GET_PERSONS',\n    PROMOTED_SET_FORM: 'PROMOTED_SET_FORM',\n    SAVE_PROMOTED: 'SAVE_PROMOTED',\n    GET_PROMOTED: 'GET_PROMOTED'\n};","import React, {Component} from 'react'\nimport Layout from '../components/Layout'\nimport Table from '../components/Promovidos/Table'\nimport Filter from '../components/Promovidos/Filter'\nimport {connect} from 'react-redux'\nimport { withAuthSync } from '../actions/auth'\nimport {Checkbox} from \"react-md\";\n\n\nclass Promovido extends Component {\n\n    constructor(props){\n        super(props);\n    }\n\n\n    render() {\n        return (\n            <Layout breadcrumb='Nuevo Promovido' {...this.props}>\n                <Filter />\n                <Table />\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <DataTable\n                            noHeader={true}\n                            columns={[\n                                {\n                                    name: 'id',\n                                    selector: 'id',\n                                    sortable: true\n                                },\n                                {\n                                    name: 'Nombre',\n                                    selector: 'full',\n                                    sortable: true\n                                }\n                            ]}\n                            data={this.props.Promoteds}\n                            noDataComponent=\"SIN PROMOVIDOS\"\n                            selectableRows\n                            selectableRowsComponent={Checkbox}\n                            selectableRowsComponentProps={{ uncheckedIcon: '', checkedIcon: '' }}\n                            onTableUpdate={this.handleChange}\n                        />\n                    </div>\n                </div>\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    Promoteds: state.promovido.Promoteds\n});\n\nexport default connect(mapStateToProps)(withAuthSync(Promovido));"],"mappings":"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","sourceRoot":""}